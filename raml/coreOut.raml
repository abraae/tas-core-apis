#%RAML 0.8
---
title: TAS core outgoing (TAS -> app)
baseUri: http://talentappstore.com/{version}
version: v1

/tenants:
  post:
    description: |
      Called by TAS to inform your app that a new tenant has arrived (i.e. has clicked install on the app). The app can assume the tenant has
      status of "halted".
      
      The app can perform internal housekeeping (e.g. inserting the new tenant into its customers table) but
      should wait until the init and start events before producing or consuming APIs, accepting logins, etc.
        
      See **reboots** under [/tenants](coreIn.raml.html#tenants) for more details.

    body:
      application/json:
        schema: !include ../schemas/tenant.json
        example: !include ../examples/tenant-simple.json

  /{tenant}:
    description: |
      A tenant is a customer within the multi-tenanted environment of Talent App Store. Currently all core API calls
      that your app makes to TAS are within the context of a single tenant.
        
    delete:
      description: |
        Called by TAS to inform your app that an existing tenant has been deleted (i.e. has clicked uninstall on your app). Your app can
        assume the tenant has status "halted".
        
        Your app has now been permanently disconnected by the tenant, and should make no more tenant API calls or core API
        calls on behalf of the tenant, and should perform or schedule its own cleanup, e.g. deleting tenant data. If this
        cleanup is long-running, you should handle a case where the tenant immediately reinstalls your app, and ensure the
        cleanup from the earlier install(s) can continue.

        See **reboots** under [/tenants](coreIn.raml.html#tenants) for more details.
      responses:
        200:
        
    /preHalts:
      post:
        description: |
          Called by TAS to request your app (for a specific tenant) to immediately stop any chains of tenant API calls
          that it "owns", i.e. has started.
          
          For example if your app includes a daemon, it should shut down the daemon or at least stop it from consuming
          tenant APIs, and if it includes a UI, it should log out the user and not allow the UI to make any tenant API calls.
          
          Your app should complete the stopping process and return 200 within a few seconds.

          After this, your app should continue producing tenant APIs, and, in response to incoming tenant APIs, consuming
          tenant APIs on other apps - it just should not initiate new tenant API activity.
          
          See **reboots** under [/tenants](coreIn.raml.html#tenants) for more details.
        responses:
          200:
          
    /halts:
      post:
        description: |
          Called by TAS to request your app to (for a specific tenant)
          - stop producing or consuming tenant APIs
          - stop consuming core APIs
           - stop accepting logins
          
          Your app should immediately (before responding) stop making tenant API calls, then respond with 200.
          
          After this, until your app receives the init call, it should consume no tenant APIs, and only these core APIs:
          
          - GET /tenants/{tenant}/status
          
          See **reboots** under [/tenants](coreIn.raml.html#tenants) for more details.
        responses:
          200:
          
    /preStarts:
      post:         
        description: |
          Called by TAS to notify your app that it is being started up as part of a reboot, and that it can now start making core API calls.

          Your app should perform normal init processing (as below), and then return 200 as soon as possible.
          - apps that consume APIs should discard any cached OAuth tokens where the consumer sgen does not match the
          tenant's new sgen  
          - apps that produce APIs should discard any cached OAuth tokens (i.e. cached to avoid re-checking) where the producer sgen
          does not match the tenant's new sgen  
          
          After returning 200, your app should start producing tenant API calls immediately. However it should not consume any tenant APIs,
          except in response to an incoming tenant API call (i.e. your app may take part in, but should not initiate, chains of tenant API calls).

          See **reboots** under [/tenants](coreIn.raml.html#tenants) for more details.
          
    /starts:
      post:         
        description: |
          Called by TAS to notify your app that it is being started up as part of a reboot, and that it can now start making tenant API calls.

          Your app should return 200 as soon as possible.
          
          After returning 200, your app can start consuming tenant API calls as normal.

          See **reboots** under [/tenants](coreIn.raml.html#tenants) for more details.
          
    /storeFrontMainPage:
      get:
        description: |
          <p>Only called on apps tagged with storeFront.</p>
          <p>Called by TAS to ask for the main page of your storeFront app. TAS calls this on your app whenever the tenant clicks to
          uninstall a storeFront app, while using that same app.</p>
          <p>When this happens, the browser needs to be redirected to one of the remaining (or new) storeFronts main pages. If there
          are multiple storeFronts remaining, TAS will pick one at random.</p>
          <p>The main page is normally the first page a user sees after logging in, typically displaying the apps hero list.</p>
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/storeFrontMainPage.json
                example: !include ../examples/storeFrontMainPage-simple.json
                
    /logins:
      /{PT}:
        description: the principal type
        /{entityID}:
          description: the base64-encoded entityID of the principal logging in
          /{nameID}:
            description: the base64-encoded nameID of the principal logging in
            post:
              description: |
                Called by TAS to tell your assertionDecorator app about someone logging in. The request body contains
                the incoming SAML assertion. 
              
                AssertionDecorators are special, highly privileged apps that can inject roles into the SAML assertion
                or deny login altogether.

                Since your assertionDecorator app cannot know all of the possible types of principal that might log in, it should
                return with status 200 and an empty set of roles in the response body immediately if it does not recognise the
                principal type.

                A typical assertionDecorators would be a legacy ATS system. On someone logging in, the app might look up the
                principal in its database, and inject the role of "alumni" (for example) if appropriate. Then, the candidate
                can securely log into some other system that requires the role of alumni but has no users table of its own.

                TAS will only call this API on apps that are declared to be assertionDecorators. TAS will
                wait until all assertionDecorators have responded with 200 before it passes the login through to the web app.
                
                See [Injecting role attributes](../doc/identityMapping.html#Injecting_role_attributes_-_assertion_decorator_apps) for more details.
                
              body:
                application/xml:
              responses:
                403:
                  description: respond with this to indicate that login should fail 
                200:
                  description: respond with this to indicate that login should proceed, and any roles passed in the response should be merged into the SAML assertion 
                  body:
                    application/json:
                      schema: !include ../schemas/injectedRoles.json
                      example: !include ../examples/injectedRoles-simple.json
  
