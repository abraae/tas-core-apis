#%RAML 0.8
---
title: TAS core outgoing (TAS -> app)
baseUri: http://talentappstore.com/{version}
version: v1

/tenants:
  /{tenant}:
    description: |
      A tenant is a customer within the multi-tenanted environment of Talent App Store. Currently all core API calls
      that your app makes to TAS are within the context of a single tenant.   
    post:
      description: |
        Called by TAS to inform your app that a new tenant has arrived (i.e. has clicked install on the app). The app can assume the tenant is dormant.
        The app can perform internal housekeeping (e.g. inserting the new tenant into its customers table) but should wait until the
        startUp event before loading caches, producing or consuming APIs, accepting logins, etc.  
    delete:
      description: |
        Called by TAS to inform your app that an existing tenant has been deleted (i.e. has clicked uninstall on the app). The app can assume the tenant
        is dormant. The app has now been permanently disconnected by the tenant, and should make no more tenant API calls or core API
        calls on behalf of the tenant, and should perform or schedule its own cleanup, e.g. deleting tenant data.   
    /halts:
      post:
        description: |
          Called by TAS to request your app to stop, i.e. stop producing or consuming APIs or accepting logins for this tenant.
          Your app should immediately (before responding) stop making tenant API calls. Once your app responds, TAS marks
          its state as <b>dormant</b>. While dormant, your app should consume no tenant APIs, and only these core APIs:
          
          - GET /tenants/{tenant}/status
          
          Once the tenant's last installed app becomes dormant, TAS marks the tenant's status as <b>halted</b>.

          See [Orchestration](../doc/overview.html#Supporting_orchestration) for more details. 
        responses:
          200:
    /starts:
      post:         
        description: |
          Called by TAS to notify your app that it should leave the <b>dormant</b> state and start up, i.e. start making core API calls
          and tenant API calls.

          Normally while your app is dormant, it should not serve any incoming tenant API calls. However the restart phase,
          its possible that some other app that consumes APIs that your app produces might receive its start notification
          before your app. Therefore, when dormant, before rejecting the incoming tenant API call, your app should call
          GET /tenants/{tenant}/status, and treat a status of 'startingUp' as being the same as if a start
          notification had been seen - i.e. perform startup processing and then produce the API normally. Your app should
          be wary of attempts by attacking apps to flood it with tenant API calls while the tenant is in the halted state.   

          In startup processing, your app should call GET /tenants/{tenant}/status to fetch the tenant's new security generation,
          and:
          - apps that consume APIs should discard any cached OAuth tokens where the consumer sgen does not match the
          tenant's new sgen  
          - apps that produce APIs should discard any cached OAuth tokens (i.e. cached to avoid re-checking) where the producer sgen
          does not match the tenant's new sgen  

          See [Orchestration](../doc/overview.html#Supporting_orchestration) for more details. 
          
    /m/storeFrontMainPage:
      get:
        description: |
          <p>Only called on apps tagged with storeFront.</p>
          <p>Called by TAS to ask for the main page of your storeFront app. TAS calls this on your app whenever the tenant clicks to
          uninstall a storeFront app, while using that same app.</p>
          <p>When this happens, the browser needs to be redirected to one of the remaining (or new) storeFronts main pages. If there
          are multiple storeFronts remaining, TAS will pick one at random.</p>
          <p>The main page is normally the first page a user sees after logging in, typically displaying the apps hero list.</p>
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/storeFrontMainPage.json
                example: !include ../examples/storeFrontMainPage-simple.json
    /logins:
      /{principalDeveloper}:
        /{principalType}:
          /{entityID}:
            /{nameID}:
              post:
                description: |
                  <p>Called by TAS to tell your loginListener app about someone logging in.</p>
                  <p>LoginListeners are special, highly privileged apps that can merge information about the logged in user
                  into their session document, such as roles and entitlements.</p>
                  <p>Since your loginListener app cannot know all of the possible types of principal that might log in, it should
                  return with status 200 immediately unless the type is one that the app understands.</p>
                  <p>A typical loginListener would be a legacy ATS system. On someone logging in, the app might:
                  <ul>
                  <li>examine the existing session data for an "auto-provisioning == true" attribute (possibly injected for all users logging in through
                  a specific IdP, such as a support team's IdP) to determine whether to auto-provision or not
                  <li>if auto-provisioning, next use other attributes (name, etc.) to make tenant API calls against the SCIM SoT server
                  by making calls to GET /users/{}, POST /users, etc.</p>
                  </ul>
                  <p>TAS will only call this API on apps that are declared to be authListeners. TAS will
                  wait until all authListeners have responded with 200 before it passes the login through to the web app, so that any
                  auto-provisioning type operations are complete by the time the user login hits the web site.</p>
                  <p>RAML (the tool used to create this documentation) does not allow currently allow describing the different parts
                  of multipart/form-data, but for this endpoint your app will receive two parts - the raw SAML authentication assertion
                  itself, and the derived samlSubject object (json).
                body:
                  multipart/form-data:
  
