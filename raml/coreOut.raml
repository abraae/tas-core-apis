#%RAML 0.8
---
title: TAS core outgoing (TAS -> app)
baseUri: http://talentappstore.com/{version}
version: v1

/{tenant}:
  description: |
    A tenant is a customer within the multi-tenanted environment of Talent App Store. Currently all core API calls
    that your app makes to TAS are within the context of a single tenant.   
  post:
    description: |
      Called by TAS to inform your app that a new tenant has arrived (i.e. has clicked install on the app). The app can assume the tenant is dormant.
      The app can perform internal housekeeping (e.g. inserting the new tenant into its customers table) but should wait until the
      startUp event before loading caches, producing or consuming APIs, accepting logins, etc.  
  delete:
    description: |
      Called by TAS to inform your app that an existing tenant has been deleted (i.e. has clicked uninstall on the app). The app can assume the tenant
      is dormant. The app has now been permanently disconnected by the tenant, and should make no more tenant API calls or core API
      calls on behalf of the tenant, and should perform or schedule its own cleanup, e.g. deleting tenant data.   
  /halts:
    post:
      description: |
        Called by TAS to request your app to stop, i.e. stop producing or consuming APIs or accepting logins for this tenant.
        The app may choose to continue producing APIs for a few seconds to contribute to an
        orderly tenant shutdown (as long as doing so does not require
        consuming other app's APIs, since those apps are likely also shutting down), but in any case should aim to shut
        down within a few seconds. The app should not provide its response until it is halted.
        Upon receiving a shutDown request, apps should discard any local copies of incoming or outgoing routes,
        tenant HMAC signing keys (though not the app's own signing key for making core API calls, which is unaffected by a halt),
        OAuth tokens and basic auth credentials. All of these should be reloaded from TAS as required at start time.
        Existing principal authentications are unaffected and can continue to be used.
      responses:
        200:
  /startUps:
    post:         
      description: |
        Called by TAS to notify your app that it should start up. When dormant, apps should never accept logins or other end user activity (such
        as page serves, or incoming API calls from external systems outside TAS) until they have received a startUp notification.
        However producer apps (i.e. API servers) may, due to network delays, receive incoming API requests from other tenant apps
        before they have received their own startUp notification. To check for this, producers receiving an incoming tenant API call
        while dormant may choose to call GET /{tenant}, and treat a status of 'startingUp' as being the same as if a startUp
        notification had been seen, i.e. produce the API normally.
        
  /m/storeFrontMainPage:
    get:
      description: |
        <p>Only called on apps tagged with storeFront.</p>
        <p>Called by TAS to ask for the main page of your storeFront app. TAS calls this on your app whenever the tenant clicks to
        uninstall a storeFront app, while using that same app.</p>
        <p>When this happens, the browser needs to be redirected to one of the remaining (or new) storeFronts main pages. If there
        are multiple storeFronts remaining, TAS will pick one at random.</p>
        <p>The main page is normally the first page a user sees after logging in, typically displaying the apps hero list.</p>
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/storeFrontMainPage.json
              example: !include ../examples/storeFrontMainPage-simple.json
          
  /authentications:
    /{principalDev}:
      /{principalType}:
        /pings:
          post:
            description: |
              <p>Called by TAS to tell your authListener app about someone logging in.</p>
              <p>AuthListeners are special, highly privileged apps that perform housekeeping when users (principals) log in.</p>
              <p>A typical authListener would be an auto-provisioning app. On someone logging in, the app would
              examine the attributes of the incoming SAML assertion and use the data to maintain a SCIM SoT server
              by making calls to GET /users/{}, POST /users, etc.</p>
              <p>Since your app cannot know all of the possible types of principal that might log in, it should
              return with status 200 immediately for unrecognized types.</p>
              <p>TAS will only call this API on apps that are declared to be authListeners. TAS will
              wait until all authListeners have responded with 200 before it passes the login through to the web app, so that any
              auto-provisioning type operations are complete by the time the user login hits the web site.</p>
              <p>RAML (the tool used to create this documentation) does not allow currently allow describing the different parts
              of multipart/form-data, but for this endpoint your app will receive two parts - the raw SAML authentication assertion
              itself, and the derived samlSubject object (json).
            body:
              multipart/form-data:

