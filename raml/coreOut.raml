#%RAML 0.8
---
title: TAS core outgoing (TAS -> app)
baseUri: http://talentappstore.com/{version}
version: v1

/{tenant}:
  description: |
    A tenant is a customer within the multi-tenanted environment of Talent App Store. Currently all core API calls
    that your app makes to TAS are within the context of a single tenant.   
  post:
    description: |
      Called by TAS to inform your app that a new tenant has arrived (i.e. has clicked install on the app). The app can assume the tenant is dormant.
      The app can perform internal housekeeping (e.g. inserting the new tenant into its customers table) but should wait until the
      startUp event before loading caches, producing or consuming APIs, accepting logins, etc.  
  delete:
    description: |
      Called by TAS to inform your app that an existing tenant has been deleted (i.e. has clicked uninstall on the app). The app can assume the tenant
      is dormant. The app has now been permanently disconnected by the tenant, and should make no more tenant API calls or core API
      calls on behalf of the tenant, and should perform or schedule its own cleanup, e.g. deleting tenant data.   
  /shutDowns:
    post:
      description: |
        Called by TAS to request your app to become dormant, i.e. stop producing or consuming APIs or accepting logins. The app may choose to continue
        producing APIs for a few seconds to contribute to an orderly tenant shutdown (as long as doing so does not require
        consuming other app's APIs, since those apps are likely also shutting down), but in any case should aim to shut
        down within a few seconds. Once the app is fully dormant it should signal this via a POST to the shutDownComplete webhook
        passed in the request. This feedback allows TAS to know when all apps are dormant.
        Upon receiving a shutDown request, apps should discard any local copies of incoming or outgoing routes,
        tenant HMAC signing keys (though not the app's own signing key for making core API calls,which is unaffected by a takeDown),
        OAuth tokens and basic auth credentials. All of these should be reloaded from TAS as required at bringUp time.
        Existing principal authentications are unaffected and can continue to be used.
      body:
        application/json:
          schema: !include ../schemas/shutDownRequest.json
          example: !include ../examples/shutDownRequest.json
  /startUps:
    post:         
      description: |
        Called by TAS to notify your app that it should start up. When dormant, apps should never accept logins or other end user activity (such
        as page serves, or incoming API calls from external systems outside TAS) until they have received a startUp notification.
        However producer apps (i.e. API servers) may, due to network delays, receive incoming API requests from other tenant apps
        before they have received their own startUp notification. To check for this, producers receiving an incoming tenant API call
        while dormant may choose to call GET /{tenant}, and treat a status of 'startingUp' as being the same as if a startUp
        notification had been seen, i.e. produce the API normally. 
  /authentications:
    /{principalDev}:
      /{principalType}:
        /pings:
          post:
            description: |
              Called by TAS to tell your app about someone logging in. Useful for apps that are first-line "auto-provisioning" generators, i.e. that capture
              *all* logins, and then refine those down so that other apps can listen to only logins for principal types they care about.
              For example, an app handling this core API might produce a tenant API like:
              POST <tas>/employees/{}/deltaPings.
              TAS (more precisely the TAS SAML proxy) will only call this API on apps that are declared to be authListeners. TAS will
              wait until all authListeners have responded with 200 before it passes the login through to the web app, so that any
              auto-provisioning is complete by the time the user login "hits" the web site.
            body:
              application/json:
                schema: !include ../schemas/principalAuthn.json
                example: !include ../examples/principalAuthn.json

